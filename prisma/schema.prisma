// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Room {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  capacity    Int
  description String?
  floor       String?
  building    String?
  equipment   String[]
  bookings    Booking[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  email         String         @unique
  name          String
  password      String
  phone         String?
  role          String         @default("user") // user, admin
  bookings      Booking[]
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  RefreshToken  RefreshToken[]
}

model Booking {
  id                 String         @id @default(auto()) @map("_id") @db.ObjectId
  startTime          DateTime
  endTime            DateTime
  status             String         @default("confirmed") // confirmed, cancelled, completed
  title              String?
  description        String?
  attendees          Int?
  cancellationReason String?
  room               Room           @relation(fields: [roomId], references: [id])
  roomId             String         @db.ObjectId
  user               User           @relation(fields: [userId], references: [id])
  userId             String         @db.ObjectId
  notifications      Notification[]
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
}

model Notification {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  booking       Booking   @relation(fields: [bookingId], references: [id])
  bookingId     String    @db.ObjectId
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @db.ObjectId
  status        String    @default("pending") // pending, sent, failed
  type          String // reminder, confirmation, start
  subject       String
  content       String
  scheduledTime DateTime
  sentTime      DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model RefreshToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}
